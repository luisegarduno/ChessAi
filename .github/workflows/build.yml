name: EnigmaChess

on:
  push:
    branches: [main]

jobs:
  build:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    timeout-minutes: 3
    env:
      BUILD_TYPE: Release
      EXE_NAME: EnigmaEngine
      COMPILER: ${{matrix.config.compiler}}
      INPUT_FILES:
      OUTPUT_FILES:
      COMP: ${{matrix.config.comp}}
      CXXFLAGS: "-Werror"
    strategy:
      matrix:
        config:
          - {
              name: "Ubuntu 20.04 GCC",
              os: ubuntu-20.04,
              compiler: g++,
              comp: gcc,
              shell: 'bash {0}'
          }
    defaults:
      run:
        shell: ${{matrix.config.shell}}

    steps:
      - name: Checkout project repo from GitHub
        uses: actions/checkout@v1

      - name: Download required linux packages
        run: |
          sudo apt update
          sudo apt install expect valgrind g++-multilib qemu-user

      - name: Executable name Environment Variable Check
        run: |
          echo ${{env.EXE_NAME}}}
          echo " "
          echo ${{runner.workspace}}
          echo " "
          echo $GITHUB_WORKSPACE
          echo " "
          $COMPILER --version
          cmake --version

      - name: Create build environment
        run:  mkdir ${{runner.workspace}}/build

      - name: Configure the build
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build the project
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config $BUILD_TYPE

      - name: Run the project - Testing
        working-directory: ${{runner.workspace}}/build
        run: ./$EXE_NAME ''

      - name: Run the project - Valgrind
        working-directory: ${{runner.workspace}}/build
        run: valgrind --error-exitcode=42 --errors-for-leak-kinds=all --leak-check=full ./EnigmaEngine 10 18 1>/dev/null
   
      - name: Copy output files to artifact directory
        working-directory: ${{runner.workspace}}/build
        run: |
          mkdir artifacts
          for f in $OUTPUT_FILES
          do
            echo "  Copying $f"
            cp $f artifacts/
          done
          
      - name: Upload output files to GitHub so they can be reviewed
        uses: actions/upload-artifact@v1
        with:
          name: project_output
          path: ${{runner.workspace}}/build/artifacts
